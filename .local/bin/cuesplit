#!/usr/bin/env python3

import argparse
import mimetypes
import subprocess
from dataclasses import dataclass
from functools import partial
from multiprocessing import Pool
from pathlib import Path
from typing import Iterator


@dataclass
class Splittable:
    audio: Path
    cue: Path


def is_audio_file(file: Path) -> bool:
    file_type, _ = mimetypes.guess_type(file)
    return file_type and file_type.startswith("audio")


def find_splittable_audio_files(path: Path) -> Iterator[Splittable]:
    if path.is_file():
        if is_audio_file(path):
            cue = path.with_suffix(".cue")
            if cue.exists():
                yield Splittable(path, cue)
    elif path.is_dir():
        for sub_path in path.iterdir():
            yield from find_splittable_audio_files(sub_path)


def split(splittable: Splittable, keep: bool):
    audio = splittable.audio.resolve()
    cue = splittable.cue.resolve()

    out_dir = audio.parent.joinpath(audio.stem)
    out_dir.mkdir(exist_ok=True)

    subprocess.check_call(
        ["shnsplit", "-o", audio.suffix.removeprefix("."), "-f", str(cue), str(audio)],
        cwd=out_dir,
    )

    if not keep:
        audio.unlink()
        cue.unlink()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=Path)
    parser.add_argument("--keep", "-k", action="store_true")
    args = parser.parse_args()

    path = args.path.resolve(strict=True)
    keep = args.keep

    with Pool() as pool:
        pool.map(partial(split, keep=keep), find_splittable_audio_files(path))


if __name__ == "__main__":
    main()
